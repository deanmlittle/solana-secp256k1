pub mod curve;
pub use curve::*;

pub mod traits;
pub use traits::*;

pub mod errors;
pub use errors::*;

pub mod compressed_point;
pub use compressed_point::*;

pub mod uncompressed_point;
pub use uncompressed_point::*;

#[cfg(test)]
mod tests {
    use dashu::integer::UBig;

    use super::*;

    const EVEN_COMPRESSED: CompressedPoint = CompressedPoint([
        0x03, 0xf8, 0x5e, 0x8e, 0xd6, 0x4b, 0x88, 0x92, 0x38, 0x16, 0xf1, 0x00, 0x19, 0x0f, 0x52,
        0x5d, 0x4a, 0xbc, 0x49, 0x5f, 0x51, 0xff, 0x0b, 0x55, 0x4c, 0x72, 0xfc, 0x7e, 0x2c, 0x68,
        0xa6, 0x61, 0x62,
    ]);
    const ODD_COMPRESSED: CompressedPoint = CompressedPoint([
        0x02, 0xf8, 0x5e, 0x8e, 0xd6, 0x4b, 0x88, 0x92, 0x38, 0x16, 0xf1, 0x00, 0x19, 0x0f, 0x52,
        0x5d, 0x4a, 0xbc, 0x49, 0x5f, 0x51, 0xff, 0x0b, 0x55, 0x4c, 0x72, 0xfc, 0x7e, 0x2c, 0x68,
        0xa6, 0x61, 0x62,
    ]);

    const EVEN_UNCOMPRESSED: UncompressedPoint = UncompressedPoint([
        0xf8, 0x5e, 0x8e, 0xd6, 0x4b, 0x88, 0x92, 0x38, 0x16, 0xf1, 0x00, 0x19, 0x0f, 0x52, 0x5d,
        0x4a, 0xbc, 0x49, 0x5f, 0x51, 0xff, 0x0b, 0x55, 0x4c, 0x72, 0xfc, 0x7e, 0x2c, 0x68, 0xa6,
        0x61, 0x62, 0x53, 0xa2, 0xa6, 0x73, 0xcf, 0x19, 0x11, 0xb6, 0xfb, 0x44, 0xdd, 0xc1, 0xde,
        0x96, 0x12, 0x00, 0xc6, 0x5a, 0xf8, 0x85, 0xcb, 0xd5, 0xad, 0x1d, 0x61, 0x27, 0x57, 0x3a,
        0x28, 0x1f, 0xec, 0xe2,
    ]);
    const ODD_UNCOMPRESSED: UncompressedPoint = UncompressedPoint([
        0xf8, 0x5e, 0x8e, 0xd6, 0x4b, 0x88, 0x92, 0x38, 0x16, 0xf1, 0x00, 0x19, 0x0f, 0x52, 0x5d,
        0x4a, 0xbc, 0x49, 0x5f, 0x51, 0xff, 0x0b, 0x55, 0x4c, 0x72, 0xfc, 0x7e, 0x2c, 0x68, 0xa6,
        0x61, 0x62, 0xac, 0x5d, 0x59, 0x8c, 0x30, 0xe6, 0xee, 0x49, 0x04, 0xbb, 0x22, 0x3e, 0x21,
        0x69, 0xed, 0xff, 0x39, 0xa5, 0x07, 0x7a, 0x34, 0x2a, 0x52, 0xe2, 0x9e, 0xd8, 0xa8, 0xc4,
        0xd7, 0xe0, 0x0f, 0x4d,
    ]);

    #[test]
    fn invert_compressed() {
        let mut p = EVEN_COMPRESSED;
        assert_ne!(p, ODD_COMPRESSED);
        assert_eq!(p, EVEN_COMPRESSED);
        p.invert();
        assert_eq!(p, ODD_COMPRESSED);
        assert_ne!(p, EVEN_COMPRESSED);
    }

    #[test]
    fn invert_uncompressed() {
        let mut p = UncompressedPoint::lift_x(&EVEN_UNCOMPRESSED.x()).unwrap();
        assert_ne!(p, ODD_UNCOMPRESSED);
        assert_eq!(p, EVEN_UNCOMPRESSED);
        p.invert();
        assert_eq!(p, ODD_UNCOMPRESSED);
        assert_ne!(p, EVEN_UNCOMPRESSED);
    }

    #[test]
    fn mod_inv_n() {
        let x = Curve::mod_inv_n(&ODD_COMPRESSED.x());
        assert_eq!(
            x,
            [
                0xa6, 0xb9, 0x2b, 0xe3, 0xbc, 0x0f, 0x4c, 0x92, 0xcc, 0x90, 0xe1, 0x8e, 0x4b, 0xee,
                0xb5, 0x1e, 0xaf, 0xee, 0x56, 0x5d, 0x11, 0xb3, 0x6e, 0x75, 0x58, 0x25, 0xf3, 0xb1,
                0xc8, 0x4a, 0x34, 0x9c
            ]
        );
    }

    #[test]
    fn sec1_encode() {
        let x = ODD_UNCOMPRESSED.to_sec1_bytes();
        assert_eq!(
            x,
            [
                0x04, 0xf8, 0x5e, 0x8e, 0xd6, 0x4b, 0x88, 0x92, 0x38, 0x16, 0xf1, 0x00, 0x19, 0x0f,
                0x52, 0x5d, 0x4a, 0xbc, 0x49, 0x5f, 0x51, 0xff, 0x0b, 0x55, 0x4c, 0x72, 0xfc, 0x7e,
                0x2c, 0x68, 0xa6, 0x61, 0x62, 0xac, 0x5d, 0x59, 0x8c, 0x30, 0xe6, 0xee, 0x49, 0x04,
                0xbb, 0x22, 0x3e, 0x21, 0x69, 0xed, 0xff, 0x39, 0xa5, 0x07, 0x7a, 0x34, 0x2a, 0x52,
                0xe2, 0x9e, 0xd8, 0xa8, 0xc4, 0xd7, 0xe0, 0x0f, 0x4d
            ]
        );
    }

    #[test]
    fn negate_secret_scalar() {
        let mut secret_key = [
            0x94, 0x5c, 0xb1, 0x6d, 0x71, 0xc9, 0xb1, 0x08, 0xdd, 0x22, 0xbe, 0xeb, 0x8f, 0xa6,
            0x45, 0xe5, 0xb2, 0x6b, 0x16, 0x84, 0xf0, 0xe0, 0xf8, 0x2d, 0x4a, 0x6f, 0x9c, 0xc8,
            0xe1, 0x33, 0x39, 0xe2,
        ];
        let mut inverted_public_key = UncompressedPoint::try_from(secret_key).unwrap();
        inverted_public_key.invert();
        Curve::negate_n_assign(&mut secret_key);
        let public_key = UncompressedPoint::try_from(secret_key).unwrap();
        assert_eq!(public_key, inverted_public_key);
    }

    #[test]
    fn ec_add() {
        let private_key_1 = [0x5F, 0x53, 0xB5, 0x53, 0xFD, 0x56, 0xC2, 0x34, 0xA6, 0x54, 0xE7, 0xBC, 0xE1, 0x63, 0xB3, 0x3A, 0x3E, 0x30, 0x15, 0xAE, 0x0A, 0xF4, 0x6B, 0xD0, 0x33, 0x76, 0xC7, 0x16, 0xB4, 0x02, 0x6A, 0x4C];
        let private_key_2 = [0xFB, 0xEB, 0x9D, 0x84, 0x0A, 0xF8, 0xA8, 0x64, 0xD1, 0xCB, 0x05, 0xAA, 0x6C, 0xC5, 0xB5, 0x4F, 0x52, 0xDF, 0x19, 0x50, 0xC6, 0x56, 0x1B, 0x76, 0x41, 0x10, 0xCA, 0x07, 0xC6, 0x98, 0x70, 0x58];
        let mut private_key_3 = [0u8;32];
        private_key_3.clone_from_slice(&((UBig::from_be_bytes(&private_key_1) + UBig::from_be_bytes(&private_key_2)) % UBig::from_be_bytes(&Curve::N)).to_be_bytes());
        let pubkey_a = UncompressedPoint::try_from(private_key_1).unwrap();
        let pubkey_b = UncompressedPoint::try_from(private_key_2).unwrap();
        let pubkey_c = UncompressedPoint::try_from(private_key_3).unwrap();
        let pubkey_d = pubkey_a + pubkey_b;
        assert_eq!(pubkey_c, pubkey_d)
    }

    #[test]
    fn decompress_pubkey() {
        let pubkey = CompressedPoint([0x02, 0xf8, 0x5e, 0x8e, 0xd6, 0x4b, 0x88, 0x92, 0x38, 0x16, 0xf1, 0x00, 0x19, 0x0f,
            0x52, 0x5d, 0x4a, 0xbc, 0x49, 0x5f, 0x51, 0xff, 0x0b, 0x55, 0x4c, 0x72, 0xfc, 0x7e,
            0x2c, 0x68, 0xa6, 0x61, 0x62]);
        let decompress = UncompressedPoint::try_from(pubkey).unwrap();
        assert_eq!(decompress.0, [0xf8, 0x5e, 0x8e, 0xd6, 0x4b, 0x88, 0x92, 0x38, 0x16, 0xf1, 0x00, 0x19, 0x0f, 0x52, 0x5d, 0x4a, 0xbc, 0x49, 0x5f, 0x51, 0xff, 0x0b, 0x55, 0x4c, 0x72, 0xfc, 0x7e, 0x2c, 0x68, 0xa6, 0x61, 0x62, 0x53, 0xa2, 0xa6, 0x73, 0xcf, 0x19, 0x11, 0xb6, 0xfb, 0x44, 0xdd, 0xc1, 0xde, 0x96, 0x12, 0x00, 0xc6, 0x5a, 0xf8, 0x85, 0xcb, 0xd5, 0xad, 0x1d, 0x61, 0x27, 0x57, 0x3a, 0x28, 0x1f, 0xec, 0xe2]);
    }

    #[test]
    fn tweak_pubkey() {
        let pubkey = CompressedPoint([0x02, 0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98]);
        let decompressed = UncompressedPoint::try_from(pubkey).unwrap();
        let tweak = [0x3c, 0xf5, 0x21, 0x6d, 0x47, 0x6a, 0x5e, 0x63, 0x7b, 0xf0, 0xda, 0x67, 0x4e, 0x50, 0xdd, 0xf5, 0x5c, 0x40, 0x32, 0x70, 0xdd, 0x36, 0x49, 0x4d, 0xfc, 0xca, 0x43, 0x81, 0x32, 0xfa, 0x30, 0xe7];
        let tweaked = decompressed.tweak(tweak).unwrap();
        assert_eq!(tweaked.x(), [0xda, 0x47, 0x10, 0x96, 0x4f, 0x78, 0x52, 0x69, 0x5d, 0xe2, 0xda, 0x02, 0x52, 0x90, 0xe2, 0x4a, 0xf6, 0xd8, 0xc2, 0x81, 0xde, 0x5a, 0x0b, 0x90, 0x2b, 0x71, 0x35, 0xfd, 0x9f, 0xd7, 0x4d, 0x21]);
    }

    #[test]
    fn ec_mul() {
        let private_key_1 = [0x5F, 0x53, 0xB5, 0x53, 0xFD, 0x56, 0xC2, 0x34, 0xA6, 0x54, 0xE7, 0xBC, 0xE1, 0x63, 0xB3, 0x3A, 0x3E, 0x30, 0x15, 0xAE, 0x0A, 0xF4, 0x6B, 0xD0, 0x33, 0x76, 0xC7, 0x16, 0xB4, 0x02, 0x6A, 0x4C];
        let private_key_2 = [0xFB, 0xEB, 0x9D, 0x84, 0x0A, 0xF8, 0xA8, 0x64, 0xD1, 0xCB, 0x05, 0xAA, 0x6C, 0xC5, 0xB5, 0x4F, 0x52, 0xDF, 0x19, 0x50, 0xC6, 0x56, 0x1B, 0x76, 0x41, 0x10, 0xCA, 0x07, 0xC6, 0x98, 0x70, 0x58];
        let pubkey_1 = UncompressedPoint::try_from(private_key_1).unwrap();
        let pubkey_2 = UncompressedPoint::try_from(private_key_2).unwrap();
        let pubkey_3 = Curve::ecmul(&pubkey_1, &private_key_2);        
        let pubkey_4 = Curve::ecmul(&pubkey_2, &private_key_1);
        assert_eq!(pubkey_3, pubkey_4);
    }
}



